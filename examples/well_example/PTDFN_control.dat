/*****************************************************************************/
/* CONTROL FILE FOR PARTICLE TRACKING IN DISCRETE FRACTURE NETWORK, dfnTrans */
/*****************************************************************************/
/******************************** INPUT ************************************/
/***************************************************************************/

/**********************  INPUT FILES: DFN grid *****************************/
/**** input files of DFN grid, mainly it's output of dfnGen ******/

param: params.txt
poly: poly_info.dat
inp: full_mesh.inp
stor: full_mesh.stor

boundary: well_nodes.zone
/* boundary conditions:  in-flow and out-flow boundary nodes. 
The boundary set in dfnTrans should be consistent with those set up in dfnFlow,
PFLOTRAN   */
/*1 - top;  2 - bottom;  3 - left_w;  4 - front_n;  5 - right_e;  6 - back_s */
in-flow-boundary: 1 
out-flow-boundary: 2

/***************************** FLOW SOLUTION *****************************/

/**************** INPUT FILES: FLOTRAN outputs: flux & pressure ***********/
PFLOTRAN: yes 
PFLOTRAN_vel: darcyvel.dat 
PFLOTRAN_cell: cellinfo.dat
PFLOTRAN_uge: full_mesh_vol_area.uge

/**************** INPUT FILES: FEHM outputs: flux & pressure ** ***********/
FEHM: no 
FEHM_fin: results.fin

/***************** OUTPUT DIRECTORY *************************************/
out_dir: DFNTrans_output_dir /* path and name of directory where all the particle 
                     tracking results will be written*/


out_path: trajectories /*name of directory where all particle
                    trajectories will be saved, at "out_dir" folder */ 

/* name of resultant file (at "out_dir" folder)
contains total travel time and final positions of particles */
out_time: partime.dat

/*********************** DFN GRID & VELOCITY OUTPUTS ********************/

/* initial grid info structure output, useful for debugging */
out_grid: no

/* flow field: 3D Darcy velocities: output file has an each nodes position 
and its Darcy velocity, reconstructed from fluxes */ 
out_3dflow: no

/*************** OUTPUT OPTIONS FOR PARTICLES TRAJECTORIES ****************/
/* output frequency is set according to trajectories curvature. 
The curvature of particles trajectory is checked at every segment, from 
intersection to intersection. The output is less frequent when 
Trajectory is similar to a straight line. 
When "out_curv:yes", if "no",  the output file will contain every time step) */
out_curv: no 

/* output into avs file (INP file for each trajectory, Paraview visualization) */
out_avs: no 

/* output into trajectories ascii files (veloc+posit+cell+fract+time) */
out_traj: no

/* output of fractures ID list, that are attended by each particle */
out_fract: no 

/* use outputs to file or memory buffer. Memory buffer by default */
out_filetemp: no

/* output of particle trajectories tortuosity, torts.dat file*/
out_tort: no

/* output initial positions of particles */
out_init: no

/* Due to the mesh and DFN geometry, or other settings,
not all the particles that are placed initially at in-flow boundary
will reach out-flow face. If "allparticles_output" is on, then 
all the particles will be present in outputs. Otherwise, the outputs will
contain only those that reached out-flow boundary. */
allparticles_output: no


/*************** MARFA and/or PLUMECALC OUTPUTS *************************/
// creates output file for MARFA input
out_marfa: no

//creates output file for PLUMECALC input
out_plumecalc: no 

/*********************  Control Plane/Cylinder Output ********************/
/*** virtual Control planes will be build in the direction of flow. 
Once particle crosses the control plane, it's position, velocity, time 
will output to an ascii file. ****/ 
ControlPlane: no 

 /* the path and directory name with all particles output files */
control_out: outcontroldir

/* Delta Control Plane - the distance between control planes */
delta_Control: 1.0 

/* ControlPlane: direction of flow: x-0; y-1; z-2 */
flowdir: 1

/************************************************************************/
/**************** PARTICLES INITIAL POSITIONS ***************************/
/************************************************************************/

/*Option #1.init_nf: if yes - the same number of particles (init_partn) will be placed 
     on every boundary fracture edge at in-flow boundary, 
     equidistant from each other */
init_nf: no 
init_partn: 10

/*Option #2.init_eqd: if yes - particles will be placed on the same distance from
     each other on all over in-flow boundary edges */  
init_eqd: no  //maximum number of particles that user expects on one fracture edge
init_npart: 10


/*Option #3.all particles start from the same region at in-flow boundary, in a range  
    {in_xmin, in_xmax,in_ymin, in_ymax, in_zmin, in_zmax} */
init_oneregion: no    
in_partn: 100
in_xmin: -7.5 
in_xmax: -7.4 
in_ymin: -2.0 
in_ymax:  2.0 
in_zmin: -2.0 
in_zmax:  2.0


/* Option #4.all particles are placed randomly over all fracture surface 
     (not only on boundary edges!) */
init_random: no 
// total number of particles
in_randpart: 50    


/*Option #5.all particles are seed randomly over matrix, 
     they will start travel in DFN from the node/cell that is closest to
     their initial position in rock matrix */     
init_matrix: no
// to obtain these files, run python script RandomPositGener.py
inm_coord: ParticleInitCoordR.dat
inm_nodeID: ClosestNodeR.inp
inm_porosity: 0.02
inm_diffcoeff: 1.0e-12

/* Option #6. particles positions according to in-flow flux weight */
init_fluxw: no 
/* Initial number of particles can not be less than 
number of nodes in in-flow boundary. If it is less, 
the number of particles will be increased. */
init_totalnumber: 200 

/* Option #7. Particles start from in-flow zone nodes positions*/
/* for example, nodes defined at well zone/ex file are the position of injection well and fracture intersection */ 
init_well: yes
/* Initial number of particles seeded at each node at in-flow zone */ 
init_nodepart: 5

/***********************************************************************/
/**************** PARTICLE TRACKING PARAMETERS *************************/
/***********************************************************************/

aperture: yes  //DFN aperture
aperture_type: frac //aperture is giving per cell (type "cell") 
//    or per fracture (type "frac")
// for now we use an aperture giving per fracture
aperture_file: aperture.dat
thickness: 1.0 //DFN aperture  (used in case of no aperture file provided) 

/************* TIME DOMAIN RANDOM WALK ******************************/
tdrw: no 
tdrw_porosity: 0.02
tdrw_diffcoeff: 1.0e-13

/************************ FLOW PARAMETERS *****************************/
porosity: 1.0 // fracture porosity 
density: 997.73  //fluid density 
satur: 1.0 //fluid saturation

/********************  TIME ********************************************/
timesteps: 10000000 //number of time steps
//units of time (years, days, hours, minutes) 
time_units: seconds 

/*flux weighted particles (in case of init_nf and init_enq initial options)*/
/*in case of random initial positions, particles are weighted by initial cell aperture*/ 
flux_weight: yes
/* random generator seed */
seed: 0

/*************** ROUTING RULE AT Fracture INTERSECTIONS ***************************/
/*streamline_routing: if yes - streamline routing is the selected subgrid process
     otherwise the complete mixing rule is selected */
streamline_routing: no

/************************************************************************/
/******************************* END *************************************/
/*************************************************************************/

END
